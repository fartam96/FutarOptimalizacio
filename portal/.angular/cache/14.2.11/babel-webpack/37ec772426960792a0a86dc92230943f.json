{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { ConfirmPasswordValidator } from 'src/app/helpers/confirm-password.validator';\nimport ValidateForm from 'src/app/helpers/validateform';\nimport { ResetPassword } from 'src/app/models/reset-password.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\n\nfunction ResetComponent_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*New Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ResetComponent_small_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*ConfirmPassword is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ResetComponent_small_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Password doesn't match\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let ResetComponent = /*#__PURE__*/(() => {\n  class ResetComponent {\n    constructor(fb, activatedRoute) {\n      this.fb = fb;\n      this.activatedRoute = activatedRoute;\n      this.resetPasswordObj = new ResetPassword();\n    }\n\n    ngOnInit() {\n      this.resetPasswordForm = this.fb.group({\n        password: [null, Validators.required],\n        confirmPassword: [null, Validators.required]\n      }, {\n        validator: ConfirmPasswordValidator('password', 'confirmPassword')\n      });\n      this.activatedRoute.queryParams.subscribe(val => {\n        this.emailToReset = val['email'];\n        let uriToken = val['code'];\n        this.emailToken = uriToken.replace(/ /g, '+');\n        console.log(this.emailToReset);\n        console.log(this.emailToken);\n      });\n    }\n\n    reset() {\n      if (this.resetPasswordForm.valid) {\n        this.resetPasswordObj.email = this.emailToReset;\n        this.resetPasswordObj.newPassword = this.resetPasswordForm.value.password;\n        this.resetPasswordObj.confirmPassword = this.resetPasswordForm.value.confirmPassword;\n        this.resetPasswordObj.newPassword = this.resetPasswordForm.value.password;\n      } else {\n        ValidateForm.validateAllFormFields(this.resetPasswordForm);\n      }\n    }\n\n  }\n\n  ResetComponent.ɵfac = function ResetComponent_Factory(t) {\n    return new (t || ResetComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n\n  ResetComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResetComponent,\n    selectors: [[\"app-reset\"]],\n    decls: 23,\n    vars: 8,\n    consts: [[1, \"outer\"], [1, \"container\"], [1, \"row\"], [1, \"offset-md-2\", \"col-lg-5\", \"col-md-7\", \"offset-lg-4\", \"offset-md-3\"], [1, \"panel\", \"border\", \"bg-white\"], [1, \"panel-heading\"], [1, \"pt-3\", \"font-weight-bold\"], [1, \"panel-body\", \"p-3\"], [3, \"formGroup\"], [1, \"form-group-pt-3\"], [1, \"input-field\"], [1, \"fa\", \"fa-user\", \"p-2\"], [\"formControlName\", \"password\", \"type\", \"password\", \"placeholder\", \"password\", \"name\", \"\", \"id\", \"\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"formControlName\", \"confirmPassword\", \"type\", \"password\", \"placeholder\", \"confirmPassword\", \"name\", \"\", \"id\", \"\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\", \"mt-4\", \"w-100\", 3, \"click\"], [1, \"text-danger\"]],\n    template: function ResetComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"h3\", 6);\n        i0.ɵɵtext(7, \"Reset Password\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 7)(9, \"form\", 8)(10, \"div\", 9)(11, \"div\", 10);\n        i0.ɵɵelement(12, \"span\", 11)(13, \"input\", 12);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(14, ResetComponent_small_14_Template, 2, 0, \"small\", 13);\n        i0.ɵɵelementStart(15, \"div\", 9)(16, \"div\", 10);\n        i0.ɵɵelement(17, \"span\", 11)(18, \"input\", 14);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(19, ResetComponent_small_19_Template, 2, 0, \"small\", 13);\n        i0.ɵɵtemplate(20, ResetComponent_small_20_Template, 2, 0, \"small\", 13);\n        i0.ɵɵelementStart(21, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function ResetComponent_Template_button_click_21_listener() {\n          return ctx.reset();\n        });\n        i0.ɵɵtext(22, \" Reset \");\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵclassProp(\"error\", ctx.resetPasswordForm.controls[\"password\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"password\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"password\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"password\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵclassProp(\"error\", ctx.resetPasswordForm.controls[\"confirmPassword\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"confirmPassword\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"confirmPassword\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"confirmPassword\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.hasError(\"confirmPasswordValidator\", \"confirmPassword\"));\n      }\n    },\n    dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName]\n  });\n  return ResetComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}